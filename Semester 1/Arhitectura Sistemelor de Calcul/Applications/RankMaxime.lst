     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit ,printf
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll 
    10                                  
    11                                  segment data use32 class=data
    12                                      
    13 00000000 78A63412785634127D-         sir dd 1234a678h,12345678h,1ac3b47dh,0fedc9876h
    13 00000009 B4C31A7698DCFE     
    14                                      len equ ($-sir)/4
    15 00000010 00                          maxim db 0
    16 00000011 00                          rank db 0
    17 00000012 256300                      formatc db "%c",0
    18 00000015 257300                      formats db "%s",0
    19 00000018 256400                      format db "%d",0
    20 0000001B 00                          suma db 0
    21                                      
    22 0000001C 00<rept>                    rez times len db 0
    23                                      
    24                                  segment code use32 class=code
    25                                      start: 
    26 00000000 BE[00000000]                    mov esi,sir
    27 00000005 BF[1C000000]                    mov edi,rez
    28 0000000A B904000000                      mov ecx,len
    29                                          ;jecxz final
    30                                          
    31                                          repeta:
    32 0000000F C605[10000000]00                    mov byte[maxim],0
    33                                              ;mov byte[rank],0
    34 00000016 51                                  push ecx
    35 00000017 B904000000                          mov ecx,4
    36                                              
    37                                              determinare_maxim:
    38 0000001C AC                                      lodsb
    39 0000001D 3A05[10000000]                          cmp al,byte[maxim]
    40 00000023 760B                                    jbe next
    41 00000025 A2[10000000]                            mov byte[maxim],al
    42 0000002A 880D[11000000]                          mov byte[rank],cl
    43                                                  next:
    44 00000030 E2EA                                loop determinare_maxim
    45                                              
    46 00000032 A0[10000000]                        mov al,byte[maxim]
    47 00000037 0005[1B000000]                      add byte[suma],al
    48 0000003D A0[11000000]                        mov al,byte[rank]
    49                                              
    50 00000042 0430                                add al,"0"
    51 00000044 AA                                  stosb
    52                                              
    53 00000045 59                                  pop ecx
    54                                          
    55 00000046 E2C7                            loop repeta
    56                                          
    57                                          ;gata:
    58                                          
    59 00000048 60                              pushad
    60 00000049 68[1C000000]                    push dword rez
    61 0000004E 68[15000000]                    push dword formats
    62 00000053 FF15[00000000]                  call[printf]
    63 00000059 83C408                          add esp,8
    64 0000005C 61                              popad
    65                                          
    66 0000005D A0[1B000000]                    mov al,byte[suma]
    67 00000062 6698                            cbw
    68 00000064 98                              cwde
    69                                          
    70 00000065 60                              pushad
    71 00000066 50                              push eax
    72 00000067 68[18000000]                    push dword format
    73 0000006C FF15[00000000]                  call[printf]
    74 00000072 83C408                          add esp,8
    75 00000075 61                              popad
    76                                          
    77                                          final:
    78                                          
    79 00000076 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 00000078 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
