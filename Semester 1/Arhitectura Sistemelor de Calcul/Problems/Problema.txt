bits 32 ; assembling for the 32 bits architecture

; declare the EntryPoint (a label defining the very first instruction of the program)
global start        

; declare external functions needed by our program
extern exit               ; tell nasm that exit exists even if we won't be defining it
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions

; our data is declared here (the variables needed by our program)
segment data use32 class=data
    ; ...
    sir dw 1432h, 8675h, 0ADBCh
    len equ ($-sir)/2
    d times len dd 0
    ;01020304h,  05060708h, 0A0B0C0Dh
    var db 0

; our code starts here
segment code use32 class=code
    start:
        ; ...
        mov esi, sir
        mov ecx, len
        mov edi, d
        cld
        jecxz sfarsit
        repeta:
            lodsb ;al = 32h
            ;and al, 00001111b
            mov bl,al
            shl al, 4
            ror al, 4
            shr bl,4
            stosb
            mov al,bl
            stosb
            
            lodsb ;al = 14h
            ;and al, 00001111b
            mov bl,al
            shl al, 4
            ror al, 4
            shr bl,4
            stosb
            mov al,bl
            stosb
            
            loop repeta
        sfarsit:

        mov ecx,len
            Mov dl,1
            Repeta:
                Cmp dl,0
                Jz Terminat
                Mov dl,0
                Mov ecx, 3
         
                Mov esi,d
                add esi,[var]
                Jecxz Terminat
                RepetaFor:
                    Mov al,[esi]
                    Cmp al,[esi+1]
                    Jle Next
                    Mov bl,[esi+1]
                    Mov [esi+1],al
                    Mov [esi],bl
                    Mov dl,1
                    Next:
                    Inc esi
                    LOOP RepetaFor
                add var,4
                Jmp Repeta
            Terminat:

            mov ecx,eax
        
        ; exit(0)
        push    dword 0      ; push the parameter for exit onto the stack
        call    [exit]       ; call exit to terminate the program
